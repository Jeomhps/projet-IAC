---
- name: Install Dependencies
  hosts: all
  become: yes
  tasks:
    - name: Install Ansible, pip, and python3-docker
      ansible.builtin.apt:
        name:
          - ansible
          - python3-docker  # <-- Install via apt instead of pip
        state: present
        update_cache: yes

    - name: Install Docker for AMD64 (x86_64)
      when: ansible_architecture == "x86_64"
      block:
        - name: Add Docker GPG key (AMD64)
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
        - name: Add Docker repository (AMD64)
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            update_cache: yes
        - name: Install Docker packages (AMD64)
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
            state: present
            update_cache: yes

    - name: Install Docker for ARM64
      when: ansible_architecture == "aarch64"
      block:
        - name: Add Docker GPG key (ARM64)
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
        - name: Add Docker repository (ARM64)
          ansible.builtin.apt_repository:
            repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            update_cache: yes
        - name: Install Docker packages (ARM64)
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
            state: present
            update_cache: yes

    - name: Ensure Docker is running and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Prune Docker containers and networks (no images)
      community.docker.docker_prune:
        containers: yes
        images: no       # Skip pruning images
        networks: yes
        volumes: no      # Skip pruning volumes
        builder_cache: no  # Skip pruning builder cache
      register: prune_result

    - name: Restart Docker daemon
      ansible.builtin.service:
        name: docker
        state: restarted

    - name: Get Dockerfile hash
      ansible.builtin.stat:
        path: /vagrant/Dockerfile
        checksum_algorithm: sha256
      register: dockerfile_hash

    - name: Build custom Alpine image (if Dockerfile changed)
      community.docker.docker_image:
        name: custom-alpine-ansible
        build:
          path: /vagrant
          pull: yes
          args:
            DOCKERFILE_HASH: "{{ dockerfile_hash.stat.checksum }}"
            PASSWORD: "test"
        source: build
      when: dockerfile_hash.stat.checksum is defined

    - name: Run 10 custom Alpine containers with SSH
      community.docker.docker_container:
        name: "alpine-container-{{ item }}"
        image: custom-alpine-ansible
        state: started
        detach: yes
        ports:
          - "222{{ item }}:22"
        recreate: yes
      loop: "{{ range(1, 11) | list }}"
      #delay: 5
