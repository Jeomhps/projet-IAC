services:
  db:
    image: mariadb:11
    environment:
      - MARIADB_DATABASE=containers
      - MARIADB_USER=appuser
      - MARIADB_PASSWORD=apppass
      - MARIADB_ROOT_PASSWORD=rootpass
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -h 127.0.0.1 -uroot -p$$MARIADB_ROOT_PASSWORD --silent"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 15s
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - lab

  api:
    build:
      context: .
      dockerfile: api-go/Dockerfile
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=containers
      - DB_USER=appuser
      - DB_PASSWORD=apppass

      # Optional DB tuning (defaults shown)
      # - DB_CHARSET=utf8mb4
      # - DB_COLLATION=utf8mb4_unicode_ci
      # - DB_TIMEOUT=5s
      # - DB_READ_TIMEOUT=5s
      # - DB_WRITE_TIMEOUT=5s

      # auth config
      - JWT_SECRET=${JWT_SECRET:-change-me-in-prod}
      #- JWT_EXPIRES_MINUTES=60

      # default account for the API
      - ADMIN_DEFAULT_USERNAME=${ADMIN_DEFAULT_USERNAME:-admin}
      - ADMIN_DEFAULT_PASSWORD=${ADMIN_DEFAULT_PASSWORD:-change-me}

      # ansible related
      - ANSIBLE_FORKS=5
      - ANSIBLE_HOST_KEY_CHECKING=false
    depends_on:
      db:
        condition: service_healthy
    networks:
      - lab


  scheduler:
    build:
      context: .
      dockerfile: scheduler/Dockerfile
    environment:
      - DATABASE_URL=mysql+pymysql://appuser:apppass@db:3306/containers?charset=utf8mb4
      - DB_CONNECT_MAX_RETRIES=120
      - DB_CONNECT_RETRY_SECONDS=1
      - DB_LOCK_TIMEOUT=0
      - ANSIBLE_FORKS=5
      - CLEANUP_BATCH_SIZE=20
    depends_on:
      db:
        condition: service_healthy
    stop_signal: SIGTERM
    stop_grace_period: 90s
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - lab

  reverse-proxy:
    image: caddy:2.8-alpine
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=example.com
      - EMAIL=you@example.com
    volumes:
      - ./reverse-proxy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
    networks:
      - edge
      - lab

volumes:
  db_data:
  caddy_data:
  caddy_config:

networks:
  edge:
    driver: bridge
  lab:
    driver: bridge
